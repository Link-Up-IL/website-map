partners$days_clean <- ifelse(
partners$days_clean == "Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday" & partners$consistent_hours == "Yes",
"7 Days a Week",
partners$days_clean
)
# identify partners open Monday - Saturday with consistent hours
partners$days_clean <- ifelse(
partners$days_clean == "Monday, Tuesday, Wednesday, Thursday, Friday, Saturday" & partners$consistent_hours == "Yes",
"Monday - Saturday",
partners$days_clean
)
# split Days into substrings for each location
partners$days_split <- lapply(partners$Days, function(x) unlist(strsplit(x, ",", perl = TRUE)))
partners <- partners %>%
relocate(Hours, .before = hours_clean) %>%
relocate(Days, .before = days_clean)
View(partners)
View(partners)
View(partners)
View(partners)
#| echo: false
#| message: false
#| warning: false
# This script creates a leaflet map displaying the locations of current Link Up IL partners.
knitr::opts_chunk$set(suppress_messages = TRUE)
rm(list = ls())
library(tidyverse)
library(sf)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(htmlwidgets)
#| echo: false
#| message: false
#| warning: false
# load file with information on partners to map
partners <- read_csv("partners_June19.csv")
# load Illinois boundary shapefile downloaded from:
# https://clearinghouse.isgs.illinois.edu/data/reference/illinois-state-boundary
illinois_polygon <- st_read("IL_BNDY_State/IL_BNDY_State_Py.shp", quiet = TRUE)
#| echo: false
#| message: false
#| warning: false
# filter out partners that we don't have a location for (so can't map)
partners <- partners %>% filter(!is.na(`Latitude, Longitude`))
# split `Latitude, Longitude` column into 2 separate columns
partners <- partners %>%
separate(`Latitude, Longitude`, c("Latitude", "Longitude"), sep = ",")
# convert Latitude and Longitude columns to numeric formatting
partners <- partners %>%
mutate(Latitude = as.numeric(Latitude),
Longitude = as.numeric(Longitude))
#| echo: false
#| message: false
#| warning: false
# This chunk renames columns from the csv file (downloaded from Airtable).
# If column names are changed in the Airtable view, they can just be adjusted once here
# so that they'll be renamed to what that column is called throughout the script.
# This avoids having to change every single time that column name appears in the script.
# If a column name is changed in Airtable, it should be adjusted below on the
# right-hand side of the relevant line. The left hand-side of the equations should
# never be changed or the rest of the script will not run!
partners <- partners %>%
rename(
# "new name in R" = "old name in csv",
"Name" = "Partner Program Name",
"Type Specific" = "Type",
"Address" = "Visible Street Address",
"Address Line 2" = "Visible Street Address Line 2",
"City" = "City",
"State" = "State",
"Zip" = "Zip",
"Latitude" = "Latitude",
"Longitude" = "Longitude",
"Open Date" = "Open Date",
"Close Date" = "Close Date",
"Days"= "Days",
"Hours" = "Hours",
"Frequency" = "Frequency",
"Website" = "Website",
"Instagram" = "Instagram",
"Facebook" = "Facebook",
"Region" = "Region",
"Notes" = "Notes"
)
#| echo: false
#| message: false
#| warning: false
# create X and Y columns to save coordinates before converting to a geometry
partners <- partners %>% mutate(
X = Longitude,
Y = Latitude
)
partners <- st_as_sf(partners,
coords = c("Longitude", "Latitude"),
crs = "+proj=longlat +datum=WGS84 +no_defs")
#| echo: false
#| message: false
#| warning: false
# Partner types displayed on the map will be a bit more general than those in Airtable.
# They will include: Farmers Market, Winter Market, Farm Stand, Retail Locations, Other
# The other category will include CSAs, Mobile Markets, Grocery Deliveries, and any other
# type of partner not specified for one of the other categories
partners <- partners %>%
mutate(Type = case_when(
`Type Specific` == "Farmers Market" ~ "Farmers Market",
`Type Specific` == "Winter Market" ~ "Winter Market",
`Type Specific` == "Farm Stand" ~ "Farm Stand",
`Type Specific` %in% c("Full-Service Supermarket",
"Food Co-op",
"Neighborhood Grocer/Small Grocery Store",
"Corner Store/Convenience Store Grocer/Small Grocery Store"
) ~ "Retail Location",
TRUE ~ "Other"
))
# the colors below were chosen from the "Wong" palette on this website that provides
# color-blind friendly color palettes:
# https://davidmathlogic.com/colorblind/#%23000000-%23E69F00-%2356B4E9-%23009E73-%23F0E442-%230072B2-%23D55E00-%23CC79A7
color_coding <- list(
"Farmers Market" = "#009E73",
"Winter Market" = "#56B4E9",
"Farm Stand" = "#D55E00",
"Retail Location" = "#CC79A7",
"Extra" = "#0072B2", # an alternative shade of blue that works well
"Other" = "#E69F00"
)
#| echo: false
#| message: false
#| warning: false
# HOURS
# remove elapsed time from hours field
partners$hours_clean <- gsub("\\s*\\([^\\(]*\\)", "", partners$Hours)
# remove commas from hours_clean field
partners$hours_clean <- gsub(",", "", partners$hours_clean)
# identify whether locations have same hours each day (or no hours listed for any day)
partners$consistent_hours <- ifelse(
grepl("-", partners$hours_clean) & lengths(regmatches(partners$hours_clean, gregexpr("-", partners$hours_clean))) > 1,
"No", "Yes"
)
# DAYS
# add a space after commas in list of days
partners$days_clean <- gsub(",", ", ", partners$Days)
# identify partners open 7 days a week with same hours
partners$days_clean <- ifelse(
partners$days_clean == "Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday" & partners$consistent_hours == "Yes",
"7 Days a Week",
partners$days_clean
)
# identify partners open Monday - Saturday with consistent hours
partners$days_clean <- ifelse(
partners$days_clean == "Monday, Tuesday, Wednesday, Thursday, Friday, Saturday" & partners$consistent_hours == "Yes",
"Monday - Saturday",
partners$days_clean
)
# identify partners open Monday - Friday with consistent hours
partners$days_clean <- ifelse(
partners$days_clean == "Monday, Tuesday, Wednesday, Thursday, Friday" & partners$consistent_hours == "Yes",
"Monday - Friday",
partners$days_clean
)
# split Days into substrings for each location
partners$days_split <- lapply(partners$Days, function(x) unlist(strsplit(x, ",", perl = TRUE)))
partners <- partners %>%
relocate(Hours, .before = hours_clean) %>%
relocate(Days, .before = days_clean)
#| echo: false
#| message: false
#| warning: false
# APPROACH: splitting after every second "M"
# This function inserts a comma into the text variable at each of the index positions
# specified by the indices variable. We'll use it to insert commas and then use
# those commas to split the hours by day (simpler than splitting directly on index).
insert_commas <- function(text, indices) {
indices <- as.numeric(unlist(indices))
indices <- sort(indices, decreasing = TRUE)
# remove the last index since we don't want to insert comma at the end
#indices <- indices[1: length(indices) - 1]
for (index in indices) {
text <- paste0(substr(text, 1, index + 1), ",", substr(text, index + 2, nchar(text)))
}
return(text)
}
# create copy of data without NAs for this step, will then merge back in once processed
partners_hours <- partners %>% filter(!is.na(hours_clean))
# split up characters so they can be looped over
partners_hours$hours_chars <- sapply(partners_hours$hours_clean, function(x) strsplit(x, "")[[1]])
# find the indices for all uppercase "M"s (only ones should be in "AM" and "PM")
partners_hours$M_indices <- sapply(partners_hours$hours_chars, function(x) which(x == "M"))
# find index of every 2nd M
partners_hours$M_even_indices <- sapply(
partners_hours$M_indices,
function(x) x[seq(2, length(x), by = 2)]) # selects every second entry for that row
# Apply the insert_commas function to the dataframe to add commas after every 2nd M
partners_hours <- partners_hours %>%
rowwise() %>%
mutate(hours_separated = insert_commas(hours_clean, M_even_indices))
# remove the last comma in each row for hours_separated
partners_hours$hours_separated <- gsub(",$", "", partners_hours$hours_separated, perl = TRUE)
# split hours for different days into separate items in a list
partners_hours$hours_split <- lapply(partners_hours$hours_separated, function(x) unlist(strsplit(x, ",", perl = TRUE)))
# drop the geometry feature from this dataframe to be able to merge back to original one
# and keep only necessary columns
partners_hours <- partners_hours %>% select(Name, hours_split) %>% st_drop_geometry()
partners <- partners %>%
left_join(partners_hours, by = "Name")
# replace NULL with NA in merged hours_split column
partners <- partners %>%
mutate(hours_split = ifelse(hours_split == "NULL", NA, hours_split))
rm(partners_hours) # remove this subset to keep environment clean
#| echo: false
#| message: false
#| warning: false
# save new type variable with css color styling included based on above named list
partners$type_styled <- paste0(
"<span style='color:",
color_coding[partners$Type],
";'>",
partners$Type,
"</span>"
)
partners$type_color <- color_coding[match(partners$Type, names(color_coding))]
partners$type_color <- paste0('"', partners$type_color, '"')
# create link for google map directions to each location
# see here for more info: https://developers.google.com/maps/documentation/urls/get-started
# this link will open googlemaps with the location as destination and the user's location as starting point
partners <- partners %>%
mutate(google_maps_link = paste(
"https://www.google.com/maps/dir/?api=1&destination=",
gsub(" ", "+", Address), # replace spaces with + signs in address, needed for googlemaps address formatting
"+",
City,
"+IL",
sep = ""
)
)
#| echo: false
#| message: false
#| warning: false
partners$pop_up_name_address <- paste(
sep = "", # don't add a space between the different pieces of text defined below
# partner name
paste0("<b>", partners$Name, "</b>", "<br/>"),
# partner address
if_else(is.na(partners$Address),
"", # don't include address if none exists
# if we have an address:
if_else(is.na(partners$`Address Line 2`), # condition (no second line for address)
paste0(partners$Address, "<br/>"), # text if true (don't include 2nd address line)
paste0(partners$Address, "<br/>", partners$`Address Line 2`, "<br/>")) # text if false (include 2nd address line)
),
if_else(is.na(partners$City), # condition
"", # text if true
paste0(partners$City, ", ", partners$State, "  ", partners$Zip, "<br/>")), # text if false
# link to googlemaps directions to partner address from user's current location
if_else(is.na(partners$City), # condition
"", # text if true
paste0("<b><a href='", partners$google_maps_link, "' target='_blank'>Get Directions</a></b>", "<br/>")), # text if false
# list type of partner
paste0("<br/>", "Type: ", partners$Type, "<br/>", "<br/>"))
partners$pop_up_hours_consistent <- paste(
sep = "", # don't add a space between the different pieces of text defined below
if_else(is.na(partners$days_clean), # condition
"", # text if true
paste0("<b>Days: </b>", partners$days_clean, "<br/>")), # text if false
if_else(is.na(partners$Hours), # condition
"", # text if true
paste0("<b>Hours: </b>", partners$hours_clean, "<br/>")), # text if false
if_else(is.na(partners$Frequency) | partners$Type == "Store", # condition
"", # text if true
paste0("<b>Frequency: </b>", partners$Frequency, "<br/>")), # text if false
if_else(is.na(partners$`Open Date`) | is.na(partners$`Close Date`), # condition
"", # text if true
paste0("<b>Season: </b>", partners$`Open Date`, " - ", partners$`Close Date`, "<br/>"))
)
# Initialize the new column with an empty string
partners$pop_up_hours_inconsistent <- ""
# Loop through each row of the dataframe
for (i in 1:nrow(partners)) {
# Check if the consistent_hours variable is "No" for the current row
if (partners$consistent_hours[i] == "No") {
html_text <- "<b>Days and Hours</b><br/>"
# Get the lengths of the current lists (assuming days_split and hours_split have the same length)
len <- length(partners$days_split[[i]])
# Loop through each element in the lists
for (j in 1:len) {
day <- paste0(sep = "", partners$days_split[[i]][j], "s")
hours <- partners$hours_split[[i]][j]
# Concatenate the day and hours in HTML format
html_text <- paste0(html_text, "<b>", day, ": ", "</b>", hours, "<br/>")
}
# Assign the concatenated HTML to the new column for the current row
partners$pop_up_hours_inconsistent[i] <- html_text
}
}
partners$pop_up_social_media_notes <- paste(
sep = "", # don't add a space between the different pieces of text defined below
# hyperlinks to website and social media when we have them
if_else(is.na(partners$Website), # check if we have website info
"", # don't add anything if no website
paste0("<br/> <b><a href='", partners$Website, "' target='_blank'>Website</a></b>")), # add website if exists
if_else(is.na(partners$Instagram), # check if we have instagram info
"", # don't add anything if no Instagram
if_else(is.na(partners$Website), # check if website exists for spacing
paste0("<b><a href='", partners$Instagram, "' target='_blank'>Instagram</a></b>"), # add Instagram as first link
paste0("    |    ", "<b><a href='", partners$Instagram, "' target='_blank'>Instagram</a></b>"))), # add Instagram as additional link
if_else(is.na(partners$Facebook), # check if we have Facebook info
"", # don't add anything if no Facebook
if_else(is.na(partners$Website) & is.na(partners$Instagram), # check if website or instagram exists for spacing
paste0("<b><a href='", partners$Facebook, "' target='_blank'>Facebook</a></b>", "<br/>"), # add Facebook as first link
paste0("    |    ", "<b><a href='", partners$Facebook, "' target='_blank'>Facebook</a></b>", "<br/>"))), # add Facebook as additional link
# add any additional notes at the bottom
if_else(is.na(partners$Notes), # condition
"", # text if true
paste0("<br/>", partners$Notes)) # text if false
)
partners$pop_up_content <- paste(
sep = "",
partners$pop_up_name_address,
if_else(
partners$consistent_hours == "Yes",
partners$pop_up_hours_consistent,
partners$pop_up_hours_inconsistent
),
partners$pop_up_social_media_notes
)
#| echo: false
#| message: false
#| warning: false
# Create bounding box for the map to be able to set the most zoomed out view to the whole state, not further
# adapted from this suggestion: https://stackoverflow.com/questions/51392181/setting-boundaries-of-leaflet-with-sf-geometry-in-r
IL_bbox <- st_bbox(illinois_polygon) %>%
as.vector()
# the above code returns the longitude and latitude coordinates needed to create a box around Illinois
# save coordinates of bounding box (with first corner repeated at end) as a matrix to use for polygon creation
IL_bbox_coords <- matrix(
c(IL_bbox[1], IL_bbox[2],
IL_bbox[1], IL_bbox[4],
IL_bbox[3], IL_bbox[4],
IL_bbox[3], IL_bbox[2],
IL_bbox[1], IL_bbox[2]
),
ncol = 2, byrow = TRUE
)
# using the matrix saved above, create the polygon shape of the bounding box around Illinois
IL_bbox_polygon <- st_polygon(list(IL_bbox_coords))
# create a polygon that is larger than Illinois and the full view of the map
# we'll use this polygon to shade the portion of the map outside of Illinois
buffer_polygon <- st_buffer(IL_bbox_polygon, dist = 10)
# convert buffer_polygon to same CRS as Illinois shapefile
buffer_polygon <- st_sf(geometry = st_sfc(buffer_polygon)) # convert to an sf object so that we can add a CRS
st_crs(buffer_polygon) <- st_crs(illinois_polygon) # convert crs
# now cut out Illinois shape from the buffer polygon
outside_IL <- st_difference(buffer_polygon, illinois_polygon)
# now we can use outside_IL to color the portion of the map outside of IL in our map!
# generate the coordinates of the point at the center of the Illinois bounding box
# which will be used to center the map in the next code chunk
center_lat <- mean(IL_bbox[c(1, 3)])
center_lng <- mean(IL_bbox[c(2, 4)])
#| echo: false
#| message: false
#| warning: false
# Create base of the Leaflet map
my_map <- leaflet(options = leafletOptions(minZoom = 6)) %>%
# add background map graphics
addTiles("https://tile.jawg.io/jawg-light/{z}/{x}/{y}{r}.png?access-token=l24afZxkZQRuUAv4lcP6YHbkjTs0OFa0JWOOJNmwccbMDQ0vsUGB3td3H5Ufm17s") %>%
# add colored layer outside of IL
addPolygons(data = outside_IL, opacity = 0, fillColor = "#7393B3", fillOpacity = 0.75) %>%
# add outline of Illinois
addPolygons(data = illinois_polygon, color = "#7393B3", weight = 1, opacity = 1, fillOpacity = 0) %>%
# set initial map view to show all of Illinois by setting the bounds
fitBounds(IL_bbox[1], IL_bbox[2], IL_bbox[3], IL_bbox[4]) %>%
# set the maximum bounds over which the user can pan the map
# note: if any information is added to the popup, might need to increase the number adding to
# IL_bbox[4] below so that entire pop-ups for northern-most partners are fully viewable
# in the fully zoomed-out version of the map
setMaxBounds(IL_bbox[1] - 1, IL_bbox[2] - 1, IL_bbox[3] + 1, IL_bbox[4] + 5)
# my_map is now a map of Illinois with the portion outside of IL colored in
# LinkUp red: "#942923"
# Create function that adds markers to the map for each category of partner (e.g. farmers market, store, etc.)
# this function takes as inputs the map, list of partners, and a specific partner type
# and creates the markers and pop-ups for that type of partner
addMarkersByType <- function(map, partners, type) {
# subset only the partners of this type
filtered_partners <- partners %>% filter(type_styled == type)
marker_color <- color_coding[[filtered_partners$Type[1]]]
map <- map %>%
addCircleMarkers(
lng = filtered_partners$X,
lat = filtered_partners$Y,
radius = 5,
stroke = TRUE,
color = marker_color,
weight = 0.5,
opacity = 0.8,
fill = TRUE,
fillColor = marker_color,
fillOpacity = 0.6,
popup = filtered_partners$pop_up_content,
group = type
)
return(map)
}
# Generate a list of the unique partner types
partner_types <- unique(partners$type_styled)
# Using function defined above inside a for-loop, add layers of markers to the map
for (type in partner_types) {
my_map <- addMarkersByType(my_map, partners, type)
}
# Add layer control to allow for turning on/off of different partner type markers on the map
my_map <- my_map %>%
addLayersControl(
overlayGroups = partners$type_styled,
position = "topright",
options = layersControlOptions(collapsed = FALSE)
)
# save a function for resetting the map view to fully zoomed out
resetMaptoIL <- JS(paste(
"function(btn, map){",
sprintf("  map.setView([%f, %f], 6);", center_lat, center_lng),
"}"
)
)
# save function for zooming map to view of Chicago
Chi_center_lat <- 41.82696228156946
Chi_center_lng <- -87.67155826326643
zoomToChicago <- JS(paste(
"function(btn, map){",
sprintf("  map.setView([%f, %f], 10);", Chi_center_lat, Chi_center_lng),
"}"
)
)
# Add a search by address function and button to reset map to whole state view
my_map <- my_map %>%
# add button to reset map to fully zoomed out view of full state
addEasyButton(easyButton(
icon = "fa-globe",
title = "Reset Full State View",
onClick = resetMaptoIL
)
) %>%
# add a Zoom to Chicago button
addEasyButton(easyButton(
icon = "fa-star",
title = "Zoom to Chicago",
onClick = zoomToChicago
)
) %>%
# this adds a search by address bar to the map
addSearchOSM(options = searchOptions(hideMarkerOnCollapse = TRUE))
# consulted for help with getting rid of blue zoom circle when zooming back out:
# https://github.com/bhaskarvk/leaflet.extras/issues/209
# add minimap to bottom right corner as an additional panning option
my_map <- my_map %>% addMiniMap(zoomLevelFixed = 4,
toggleDisplay = TRUE,
minimized = TRUE)
# View the map!
my_map
# stop rendering (so maps in below chunks won't get included in the html file)
knitr::knit_exit()
View(partners)
View(partners)
# NEW METHOD (places with consistent hours coming in with hour range listed for each day)
partners$unique_hours <- length(unique(partners$hours_clean))
View(partners)
partners <- partners %>%
relocate(unique_hours, .before = consistent_hours)
View(partners)
partners <- partners %>%
rowwise() %>%
mutate(unique_hours = length(unique(hours_clean)))
partners <- partners %>%
relocate(unique_hours, .before = consistent_hours)
View(partners)
partners <- partners %>%
rowwise() %>%
mutate(unique_hours = length(unique(hours_split)))
partners <- partners %>%
relocate(unique_hours, .before = type_styled)
View(partners)
partners <- partners %>%
rowwise() %>%
mutate(unique_hours = length(unique(unlist(hours_split))))
partners <- partners %>%
relocate(unique_hours, .before = type_styled)
View(partners)
partners <- partners %>%
rowwise() %>%
mutate(unique_hours = length(unique(str_trim(hours_split))))
partners <- partners %>%
relocate(unique_hours, .before = type_styled)
View(partners)
partners$consistent_hours <- ifelse(
partners$unique_hours > 1,
"No",
"Yes"
)
View(partners)
partners <- partners %>%
rowwise() %>%
mutate(unique_hours = length(unique(str_trim(hours_split))))
partners$consistent_hours <- ifelse(
partners$unique_hours > 1,
"No",
"Yes"
)
# reorganize order of columns for easier manual verification
partners <- partners %>%
relocate(unique_hours, .before = type_styled) %>%
relocate(consistent_hours, .before = type_styled)
View(partners)
View(partners)
View(partners)
